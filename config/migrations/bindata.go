// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 0001_create.up.sql (644B)
// 0001_delete.down.sql (64B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x5d\x4f\xb3\x40\x10\x85\xef\xf9\x15\x73\x59\x92\xf7\xea\x35\xf5\xc6\x2b\x5a\xb7\x4a\x44\x30\x5b\x34\x6d\x4c\x43\xd6\xdd\xb1\x8e\xe1\xa3\xd9\x59\x5a\xf9\xf7\xa6\x40\x2a\xf8\x95\x78\xc9\x73\xce\x70\x66\x72\x76\x2e\x45\x90\x0a\x48\x83\x59\x24\x20\x5c\x40\x9c\xa4\x20\x56\xe1\x32\x5d\x82\x45\x5d\x59\xc3\x30\xf1\x00\x00\xc8\xc0\x43\x20\xe7\xd7\x81\x9c\x9c\x9d\xfb\xad\x2f\xbe\x8f\x22\xb8\x93\xe1\x6d\x20\xd7\x70\x23\xd6\xff\x5a\xe3\xa3\x51\x0e\x37\x70\x19\xa4\xa2\x07\xa5\x2a\x70\x73\x9a\xfe\x3f\x9d\xfa\x9d\xa0\xc9\x35\xdf\xe0\x9d\xad\xf6\x54\x6a\xfc\x90\x7a\x21\x27\x8d\x25\xa3\x81\x59\x92\x44\x22\x88\x3b\xba\x27\xed\xa8\x60\x08\xe3\xb4\x03\x06\x95\x7b\x19\x7c\x53\xf9\x5a\x5b\xc2\x01\xe1\x9a\x34\x19\x1c\xff\xc7\xe0\x9e\x34\x72\x56\x1f\x13\xbe\x6e\xf5\x4c\x16\x95\x2d\x78\x3c\xb4\xab\x98\x91\x19\x4d\x96\xe3\x56\xe5\x79\x33\x96\x0f\xca\x96\x54\x6e\x19\x52\xb1\xea\xb3\x2b\xd2\x19\x15\x3b\xa5\xdd\xd8\xaa\x28\xe3\xba\x28\x94\x6d\x5a\xb3\xe7\x5f\x78\xde\x2f\xe5\x94\x78\xe0\x8c\x5d\xd5\x1e\xf6\xc7\x86\xba\x62\xb3\x1f\xfc\x7d\x69\xb5\xcd\x37\x83\xb5\x9f\x2a\xd3\x64\x0e\xdf\xdc\x80\x7d\x5a\xb9\x83\x8b\x44\x8a\xf0\x2a\x3e\xa6\xc1\xe4\x94\xe4\x83\x14\x0b\x21\x45\x3c\x17\x83\x87\x45\xc6\x3f\xde\xf9\x1e\x00\x00\xff\xff\x0f\xf0\xb3\x32\x84\x02\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0xf9, 0x54, 0xd6, 0x2e, 0x7, 0x4c, 0xf8, 0x82, 0xee, 0x8c, 0x13, 0x24, 0x2f, 0xc3, 0x9a, 0x89, 0xe4, 0xf3, 0xe4, 0x80, 0x32, 0x4c, 0xc1, 0x52, 0xd9, 0x16, 0xa5, 0xfd, 0xfe, 0xbf, 0x8f}}
	return a, nil
}

var __0001_deleteDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4a\x4d\xce\x2f\x4a\x29\xb6\xe6\xc2\x2a\x9b\x97\x5a\x5e\x1c\x5f\x5c\x92\x5f\x94\x99\x5a\x6c\x0d\x08\x00\x00\xff\xff\x1e\x8b\x7e\x0b\x40\x00\x00\x00")

func _0001_deleteDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_deleteDownSql,
		"0001_delete.down.sql",
	)
}

func _0001_deleteDownSql() (*asset, error) {
	bytes, err := _0001_deleteDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_delete.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x2, 0xce, 0x9d, 0xe0, 0xa3, 0x74, 0x88, 0x9a, 0xa2, 0x6f, 0x10, 0x9b, 0x58, 0x16, 0x6b, 0x17, 0xb8, 0xa0, 0x10, 0x22, 0x89, 0x74, 0xb5, 0x99, 0xc4, 0xe, 0x79, 0xe3, 0x62, 0x22, 0x90}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql":   _0001_createUpSql,
	"0001_delete.down.sql": _0001_deleteDownSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql":   {_0001_createUpSql, map[string]*bintree{}},
	"0001_delete.down.sql": {_0001_deleteDownSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
